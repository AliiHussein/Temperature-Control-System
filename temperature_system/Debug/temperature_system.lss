
temperature_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000510  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000510  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d54  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007be  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000862  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ec  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002ec5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  7a:	0c 94 86 02 	jmp	0x50c	; 0x50c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
 */ 

#include "ADC.h"

void ADC_init(){
	SETBIT(ADMUX, REFS0); // AVCC with external cap at AREF pin 
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 64       	ori	r24, 0x40	; 64
  86:	87 b9       	out	0x07, r24	; 7
	
	SETBIT(ADCSRA, ADEN); // Enable ADC
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	86 b9       	out	0x06, r24	; 6
	
	ADCSRA |= 0b111; // ADC Prescaler 128, 16Mhz/128 = 125Khz
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	87 60       	ori	r24, 0x07	; 7
  92:	86 b9       	out	0x06, r24	; 6
  94:	08 95       	ret

00000096 <ADC_read>:
		
}

uint16_t ADC_read(uint8_t ch){
	
	ADMUX &= 0b11100000;
  96:	97 b1       	in	r25, 0x07	; 7
  98:	90 7e       	andi	r25, 0xE0	; 224
  9a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= ch;
  9c:	97 b1       	in	r25, 0x07	; 7
  9e:	89 2b       	or	r24, r25
  a0:	87 b9       	out	0x07, r24	; 7
	
	SETBIT(ADCSRA, ADSC); //Start conversion from analog to digital
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	86 b9       	out	0x06, r24	; 6
	
	while(READBIT(ADCSRA, ADSC) == 1); // while ADC conversion is not complete
  a8:	36 99       	sbic	0x06, 6	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <ADC_read+0x12>
		
	return ADC;
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	08 95       	ret

000000b2 <LCD_write_char>:
* Purpose      : Write a specific Ascii char (data) to lcd (valid only with 4-bit mode)
* Parameters   : data  (data to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8_t data){
	LCD_RS(1);
  b2:	9b b3       	in	r25, 0x1b	; 27
  b4:	94 60       	ori	r25, 0x04	; 4
  b6:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(data, 4));
  b8:	84 ff       	sbrs	r24, 4
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <LCD_write_char+0x12>
  bc:	9b b3       	in	r25, 0x1b	; 27
  be:	90 61       	ori	r25, 0x10	; 16
  c0:	9b bb       	out	0x1b, r25	; 27
  c2:	03 c0       	rjmp	.+6      	; 0xca <LCD_write_char+0x18>
  c4:	9b b3       	in	r25, 0x1b	; 27
  c6:	9f 7e       	andi	r25, 0xEF	; 239
  c8:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(READBIT(data, 5));
  ca:	85 ff       	sbrs	r24, 5
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <LCD_write_char+0x24>
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	90 62       	ori	r25, 0x20	; 32
  d2:	9b bb       	out	0x1b, r25	; 27
  d4:	03 c0       	rjmp	.+6      	; 0xdc <LCD_write_char+0x2a>
  d6:	9b b3       	in	r25, 0x1b	; 27
  d8:	9f 7d       	andi	r25, 0xDF	; 223
  da:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(READBIT(data, 6));
  dc:	86 ff       	sbrs	r24, 6
  de:	04 c0       	rjmp	.+8      	; 0xe8 <LCD_write_char+0x36>
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	90 64       	ori	r25, 0x40	; 64
  e4:	9b bb       	out	0x1b, r25	; 27
  e6:	03 c0       	rjmp	.+6      	; 0xee <LCD_write_char+0x3c>
  e8:	9b b3       	in	r25, 0x1b	; 27
  ea:	9f 7b       	andi	r25, 0xBF	; 191
  ec:	9b bb       	out	0x1b, r25	; 27
	LCD_D7(READBIT(data, 7));
  ee:	88 23       	and	r24, r24
  f0:	24 f4       	brge	.+8      	; 0xfa <LCD_write_char+0x48>
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	90 68       	ori	r25, 0x80	; 128
  f6:	9b bb       	out	0x1b, r25	; 27
  f8:	03 c0       	rjmp	.+6      	; 0x100 <LCD_write_char+0x4e>
  fa:	9b b3       	in	r25, 0x1b	; 27
  fc:	9f 77       	andi	r25, 0x7F	; 127
  fe:	9b bb       	out	0x1b, r25	; 27
	
	LCD_EN(1);
 100:	9b b3       	in	r25, 0x1b	; 27
 102:	98 60       	ori	r25, 0x08	; 8
 104:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	ef e9       	ldi	r30, 0x9F	; 159
 108:	ff e0       	ldi	r31, 0x0F	; 15
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_write_char+0x58>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_write_char+0x5e>
 110:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 112:	9b b3       	in	r25, 0x1b	; 27
 114:	97 7f       	andi	r25, 0xF7	; 247
 116:	9b bb       	out	0x1b, r25	; 27
 118:	ef e9       	ldi	r30, 0x9F	; 159
 11a:	ff e0       	ldi	r31, 0x0F	; 15
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_write_char+0x6a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_write_char+0x70>
 122:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(data, 0));
 124:	80 ff       	sbrs	r24, 0
 126:	04 c0       	rjmp	.+8      	; 0x130 <LCD_write_char+0x7e>
 128:	9b b3       	in	r25, 0x1b	; 27
 12a:	90 61       	ori	r25, 0x10	; 16
 12c:	9b bb       	out	0x1b, r25	; 27
 12e:	03 c0       	rjmp	.+6      	; 0x136 <LCD_write_char+0x84>
 130:	9b b3       	in	r25, 0x1b	; 27
 132:	9f 7e       	andi	r25, 0xEF	; 239
 134:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(READBIT(data, 1));
 136:	81 ff       	sbrs	r24, 1
 138:	04 c0       	rjmp	.+8      	; 0x142 <LCD_write_char+0x90>
 13a:	9b b3       	in	r25, 0x1b	; 27
 13c:	90 62       	ori	r25, 0x20	; 32
 13e:	9b bb       	out	0x1b, r25	; 27
 140:	03 c0       	rjmp	.+6      	; 0x148 <LCD_write_char+0x96>
 142:	9b b3       	in	r25, 0x1b	; 27
 144:	9f 7d       	andi	r25, 0xDF	; 223
 146:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(READBIT(data, 2));
 148:	82 ff       	sbrs	r24, 2
 14a:	04 c0       	rjmp	.+8      	; 0x154 <LCD_write_char+0xa2>
 14c:	9b b3       	in	r25, 0x1b	; 27
 14e:	90 64       	ori	r25, 0x40	; 64
 150:	9b bb       	out	0x1b, r25	; 27
 152:	03 c0       	rjmp	.+6      	; 0x15a <LCD_write_char+0xa8>
 154:	9b b3       	in	r25, 0x1b	; 27
 156:	9f 7b       	andi	r25, 0xBF	; 191
 158:	9b bb       	out	0x1b, r25	; 27
	LCD_D7(READBIT(data, 3));
 15a:	83 ff       	sbrs	r24, 3
 15c:	04 c0       	rjmp	.+8      	; 0x166 <LCD_write_char+0xb4>
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	80 68       	ori	r24, 0x80	; 128
 162:	8b bb       	out	0x1b, r24	; 27
 164:	03 c0       	rjmp	.+6      	; 0x16c <LCD_write_char+0xba>
 166:	8b b3       	in	r24, 0x1b	; 27
 168:	8f 77       	andi	r24, 0x7F	; 127
 16a:	8b bb       	out	0x1b, r24	; 27
	
	LCD_EN(1);
 16c:	8b b3       	in	r24, 0x1b	; 27
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	8b bb       	out	0x1b, r24	; 27
 172:	8f e9       	ldi	r24, 0x9F	; 159
 174:	9f e0       	ldi	r25, 0x0F	; 15
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_write_char+0xc4>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_write_char+0xca>
 17c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	8b bb       	out	0x1b, r24	; 27
 184:	ef e9       	ldi	r30, 0x9F	; 159
 186:	ff e0       	ldi	r31, 0x0F	; 15
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_write_char+0xd6>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_write_char+0xdc>
 18e:	00 00       	nop
 190:	08 95       	ret

00000192 <LCD_write_command>:
* Purpose      : Send a specific command (cmd) to lcd (valid only with 4-bit mode)
* Parameters   : cmd  (command to be done by lcd)
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8_t cmd){
	LCD_RS(0);
 192:	9b b3       	in	r25, 0x1b	; 27
 194:	9b 7f       	andi	r25, 0xFB	; 251
 196:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(cmd, 4));
 198:	84 ff       	sbrs	r24, 4
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <LCD_write_command+0x12>
 19c:	9b b3       	in	r25, 0x1b	; 27
 19e:	90 61       	ori	r25, 0x10	; 16
 1a0:	9b bb       	out	0x1b, r25	; 27
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <LCD_write_command+0x18>
 1a4:	9b b3       	in	r25, 0x1b	; 27
 1a6:	9f 7e       	andi	r25, 0xEF	; 239
 1a8:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(READBIT(cmd, 5));
 1aa:	85 ff       	sbrs	r24, 5
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <LCD_write_command+0x24>
 1ae:	9b b3       	in	r25, 0x1b	; 27
 1b0:	90 62       	ori	r25, 0x20	; 32
 1b2:	9b bb       	out	0x1b, r25	; 27
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCD_write_command+0x2a>
 1b6:	9b b3       	in	r25, 0x1b	; 27
 1b8:	9f 7d       	andi	r25, 0xDF	; 223
 1ba:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(READBIT(cmd, 6));
 1bc:	86 ff       	sbrs	r24, 6
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <LCD_write_command+0x36>
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	90 64       	ori	r25, 0x40	; 64
 1c4:	9b bb       	out	0x1b, r25	; 27
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <LCD_write_command+0x3c>
 1c8:	9b b3       	in	r25, 0x1b	; 27
 1ca:	9f 7b       	andi	r25, 0xBF	; 191
 1cc:	9b bb       	out	0x1b, r25	; 27
	LCD_D7(READBIT(cmd, 7));
 1ce:	88 23       	and	r24, r24
 1d0:	24 f4       	brge	.+8      	; 0x1da <LCD_write_command+0x48>
 1d2:	9b b3       	in	r25, 0x1b	; 27
 1d4:	90 68       	ori	r25, 0x80	; 128
 1d6:	9b bb       	out	0x1b, r25	; 27
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <LCD_write_command+0x4e>
 1da:	9b b3       	in	r25, 0x1b	; 27
 1dc:	9f 77       	andi	r25, 0x7F	; 127
 1de:	9b bb       	out	0x1b, r25	; 27
	
	LCD_EN(1);
 1e0:	9b b3       	in	r25, 0x1b	; 27
 1e2:	98 60       	ori	r25, 0x08	; 8
 1e4:	9b bb       	out	0x1b, r25	; 27
 1e6:	ef e9       	ldi	r30, 0x9F	; 159
 1e8:	ff e0       	ldi	r31, 0x0F	; 15
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_write_command+0x58>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_write_command+0x5e>
 1f0:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1f2:	9b b3       	in	r25, 0x1b	; 27
 1f4:	97 7f       	andi	r25, 0xF7	; 247
 1f6:	9b bb       	out	0x1b, r25	; 27
 1f8:	ef e9       	ldi	r30, 0x9F	; 159
 1fa:	ff e0       	ldi	r31, 0x0F	; 15
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_write_command+0x6a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_write_command+0x70>
 202:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(cmd, 0));
 204:	80 ff       	sbrs	r24, 0
 206:	04 c0       	rjmp	.+8      	; 0x210 <LCD_write_command+0x7e>
 208:	9b b3       	in	r25, 0x1b	; 27
 20a:	90 61       	ori	r25, 0x10	; 16
 20c:	9b bb       	out	0x1b, r25	; 27
 20e:	03 c0       	rjmp	.+6      	; 0x216 <LCD_write_command+0x84>
 210:	9b b3       	in	r25, 0x1b	; 27
 212:	9f 7e       	andi	r25, 0xEF	; 239
 214:	9b bb       	out	0x1b, r25	; 27
	LCD_D5(READBIT(cmd, 1));
 216:	81 ff       	sbrs	r24, 1
 218:	04 c0       	rjmp	.+8      	; 0x222 <LCD_write_command+0x90>
 21a:	9b b3       	in	r25, 0x1b	; 27
 21c:	90 62       	ori	r25, 0x20	; 32
 21e:	9b bb       	out	0x1b, r25	; 27
 220:	03 c0       	rjmp	.+6      	; 0x228 <LCD_write_command+0x96>
 222:	9b b3       	in	r25, 0x1b	; 27
 224:	9f 7d       	andi	r25, 0xDF	; 223
 226:	9b bb       	out	0x1b, r25	; 27
	LCD_D6(READBIT(cmd, 2));
 228:	82 ff       	sbrs	r24, 2
 22a:	04 c0       	rjmp	.+8      	; 0x234 <LCD_write_command+0xa2>
 22c:	9b b3       	in	r25, 0x1b	; 27
 22e:	90 64       	ori	r25, 0x40	; 64
 230:	9b bb       	out	0x1b, r25	; 27
 232:	03 c0       	rjmp	.+6      	; 0x23a <LCD_write_command+0xa8>
 234:	9b b3       	in	r25, 0x1b	; 27
 236:	9f 7b       	andi	r25, 0xBF	; 191
 238:	9b bb       	out	0x1b, r25	; 27
	LCD_D7(READBIT(cmd, 3));
 23a:	83 ff       	sbrs	r24, 3
 23c:	04 c0       	rjmp	.+8      	; 0x246 <LCD_write_command+0xb4>
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	80 68       	ori	r24, 0x80	; 128
 242:	8b bb       	out	0x1b, r24	; 27
 244:	03 c0       	rjmp	.+6      	; 0x24c <LCD_write_command+0xba>
 246:	8b b3       	in	r24, 0x1b	; 27
 248:	8f 77       	andi	r24, 0x7F	; 127
 24a:	8b bb       	out	0x1b, r24	; 27
	
	LCD_EN(1);
 24c:	8b b3       	in	r24, 0x1b	; 27
 24e:	88 60       	ori	r24, 0x08	; 8
 250:	8b bb       	out	0x1b, r24	; 27
 252:	8f e9       	ldi	r24, 0x9F	; 159
 254:	9f e0       	ldi	r25, 0x0F	; 15
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <LCD_write_command+0xc4>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <LCD_write_command+0xca>
 25c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	87 7f       	andi	r24, 0xF7	; 247
 262:	8b bb       	out	0x1b, r24	; 27
 264:	ef e9       	ldi	r30, 0x9F	; 159
 266:	ff e0       	ldi	r31, 0x0F	; 15
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCD_write_command+0xd6>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCD_write_command+0xdc>
 26e:	00 00       	nop
 270:	08 95       	ret

00000272 <LCD_init>:
* Purpose      : initialize LCD to work in 4-bit mode - clear lcd - cursor off
* Parameters   : void
* Return value : void
*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PINS();
 272:	8a b3       	in	r24, 0x1a	; 26
 274:	8c 6f       	ori	r24, 0xFC	; 252
 276:	8a bb       	out	0x1a, r24	; 26
	LCD_write_command(0x3);
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
 27e:	8f e7       	ldi	r24, 0x7F	; 127
 280:	9e e3       	ldi	r25, 0x3E	; 62
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_init+0x10>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_init+0x16>
 288:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
 290:	8f e7       	ldi	r24, 0x7F	; 127
 292:	9e e3       	ldi	r25, 0x3E	; 62
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_init+0x22>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_init+0x28>
 29a:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x3);
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
 2a2:	8f e7       	ldi	r24, 0x7F	; 127
 2a4:	9e e3       	ldi	r25, 0x3E	; 62
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_init+0x34>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_init+0x3a>
 2ac:	00 00       	nop
	_delay_ms(4);
	LCD_write_command(0x2);
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
	LCD_write_command(0x28);
 2b4:	88 e2       	ldi	r24, 0x28	; 40
 2b6:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
	LCD_write_command(0x01);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
	LCD_write_command(0x06);
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
	LCD_write_command(0x0C);
 2c6:	8c e0       	ldi	r24, 0x0C	; 12
 2c8:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	29 ef       	ldi	r18, 0xF9	; 249
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	20 40       	sbci	r18, 0x00	; 0
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <LCD_init+0x60>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_init+0x6a>
 2dc:	00 00       	nop
 2de:	08 95       	ret

000002e0 <LCD_write_number>:
* Function Name: LCD_write_num
* Purpose      : Write a specific number (num) on lcd (valid only with 4-bit mode)
* Parameters   : num  (num to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_number(int32_t num){
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	2a 97       	sbiw	r28, 0x0a	; 10
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
	int8_t i = 0;
	uint8_t num_arr[10];
	uint8_t neg_flag = 0;
	
	if(num < 0){
 2f8:	99 23       	and	r25, r25
 2fa:	4c f4       	brge	.+18     	; 0x30e <LCD_write_number+0x2e>
		num *= -1;
 2fc:	90 95       	com	r25
 2fe:	80 95       	com	r24
 300:	70 95       	com	r23
 302:	61 95       	neg	r22
 304:	7f 4f       	sbci	r23, 0xFF	; 255
 306:	8f 4f       	sbci	r24, 0xFF	; 255
 308:	9f 4f       	sbci	r25, 0xFF	; 255
		neg_flag = 1;
 30a:	01 e0       	ldi	r16, 0x01	; 1
 30c:	01 c0       	rjmp	.+2      	; 0x310 <LCD_write_number+0x30>
* Return value : void
*****************************************************************************/
void LCD_write_number(int32_t num){
	int8_t i = 0;
	uint8_t num_arr[10];
	uint8_t neg_flag = 0;
 30e:	00 e0       	ldi	r16, 0x00	; 0
	if(num < 0){
		num *= -1;
		neg_flag = 1;
	}
	
	if(num == 0) {
 310:	61 15       	cp	r22, r1
 312:	71 05       	cpc	r23, r1
 314:	81 05       	cpc	r24, r1
 316:	91 05       	cpc	r25, r1
 318:	d1 f4       	brne	.+52     	; 0x34e <LCD_write_number+0x6e>
		LCD_write_char('0');
 31a:	80 e3       	ldi	r24, 0x30	; 48
 31c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write_char>
 320:	31 c0       	rjmp	.+98     	; 0x384 <LCD_write_number+0xa4>
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
		num_arr[i] = num % 10 + '0';
 322:	2a e0       	ldi	r18, 0x0A	; 10
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divmodsi4>
 32e:	e1 e0       	ldi	r30, 0x01	; 1
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ec 0f       	add	r30, r28
 334:	fd 1f       	adc	r31, r29
 336:	e1 0f       	add	r30, r17
 338:	f1 1d       	adc	r31, r1
 33a:	17 fd       	sbrc	r17, 7
 33c:	fa 95       	dec	r31
 33e:	60 5d       	subi	r22, 0xD0	; 208
 340:	60 83       	st	Z, r22
		num /= 10;
 342:	62 2f       	mov	r22, r18
 344:	73 2f       	mov	r23, r19
 346:	84 2f       	mov	r24, r20
 348:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_char('0');
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
 34a:	1f 5f       	subi	r17, 0xFF	; 255
 34c:	01 c0       	rjmp	.+2      	; 0x350 <LCD_write_number+0x70>
 34e:	10 e0       	ldi	r17, 0x00	; 0
 350:	61 15       	cp	r22, r1
 352:	71 05       	cpc	r23, r1
 354:	81 05       	cpc	r24, r1
 356:	91 05       	cpc	r25, r1
 358:	21 f7       	brne	.-56     	; 0x322 <LCD_write_number+0x42>
		num_arr[i] = num % 10 + '0';
		num /= 10;
	}
	i--;
 35a:	11 50       	subi	r17, 0x01	; 1
	if(neg_flag == 1){
 35c:	01 30       	cpi	r16, 0x01	; 1
 35e:	81 f4       	brne	.+32     	; 0x380 <LCD_write_number+0xa0>
		LCD_write_char('-');
 360:	8d e2       	ldi	r24, 0x2D	; 45
 362:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write_char>
 366:	0c c0       	rjmp	.+24     	; 0x380 <LCD_write_number+0xa0>
	}
	while (i >= 0){
		LCD_write_char(num_arr[i]);
 368:	e1 e0       	ldi	r30, 0x01	; 1
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	ec 0f       	add	r30, r28
 36e:	fd 1f       	adc	r31, r29
 370:	e1 0f       	add	r30, r17
 372:	f1 1d       	adc	r31, r1
 374:	17 fd       	sbrc	r17, 7
 376:	fa 95       	dec	r31
 378:	80 81       	ld	r24, Z
 37a:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write_char>
		i--;
 37e:	11 50       	subi	r17, 0x01	; 1
	}
	i--;
	if(neg_flag == 1){
		LCD_write_char('-');
	}
	while (i >= 0){
 380:	11 23       	and	r17, r17
 382:	94 f7       	brge	.-28     	; 0x368 <LCD_write_number+0x88>
		LCD_write_char(num_arr[i]);
		i--;
	}
}
 384:	2a 96       	adiw	r28, 0x0a	; 10
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <LCD_write_string>:
* Purpose      : Write a string (*txt) to lcd (valid only with 4-bit mode)
*                (assume the end char of string is NULL (Ascii:'\0' - decimal:0 ))
* Parameters   : *txt  (array of char to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t * str){
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	8c 01       	movw	r16, r24
	uint8_t i;
	
	for(i = 0; str[i] != 0; i++){
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <LCD_write_string+0x12>
		LCD_write_char(str[i]);
 3a6:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_write_char>
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8_t * str){
	uint8_t i;
	
	for(i = 0; str[i] != 0; i++){
 3aa:	cf 5f       	subi	r28, 0xFF	; 255
 3ac:	f8 01       	movw	r30, r16
 3ae:	ec 0f       	add	r30, r28
 3b0:	f1 1d       	adc	r31, r1
 3b2:	80 81       	ld	r24, Z
 3b4:	81 11       	cpse	r24, r1
 3b6:	f7 cf       	rjmp	.-18     	; 0x3a6 <LCD_write_string+0xc>
		LCD_write_char(str[i]);
	}
	
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	08 95       	ret

000003c0 <main>:
#include "LCD.h"
#include "ADC.h"

int main(void)
{
    ADC_init();
 3c0:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	LCD_init();
 3c4:	0e 94 39 01 	call	0x272	; 0x272 <LCD_init>
	
	LCD_write_string("Temperature:");
 3c8:	80 e6       	ldi	r24, 0x60	; 96
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_write_string>
	
	// DIO config
	SETBIT(DDRD, 0); // PD0 output
 3d0:	81 b3       	in	r24, 0x11	; 17
 3d2:	81 60       	ori	r24, 0x01	; 1
 3d4:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD, 1); // PD1 output
 3d6:	81 b3       	in	r24, 0x11	; 17
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	81 bb       	out	0x11, r24	; 17
	uint16_t temp;
	uint16_t volt;
    while (1) 
    {
		
		volt = ADC_read(0);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_read>
		temp = (volt * 150lu) / 1023;
 3e2:	9c 01       	movw	r18, r24
 3e4:	a6 e9       	ldi	r26, 0x96	; 150
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 3ec:	2f ef       	ldi	r18, 0xFF	; 255
 3ee:	33 e0       	ldi	r19, 0x03	; 3
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	0e 94 36 02 	call	0x46c	; 0x46c <__udivmodsi4>
 3f8:	69 01       	movw	r12, r18
 3fa:	7a 01       	movw	r14, r20
		
		if(temp < 25){
 3fc:	29 31       	cpi	r18, 0x19	; 25
 3fe:	31 05       	cpc	r19, r1
 400:	38 f4       	brcc	.+14     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			SETBIT(PORTD, 0); // HEATER ON
 402:	82 b3       	in	r24, 0x12	; 18
 404:	81 60       	ori	r24, 0x01	; 1
 406:	82 bb       	out	0x12, r24	; 18
			CLRBIT(PORTD, 1); // AIR COND OFF
 408:	82 b3       	in	r24, 0x12	; 18
 40a:	8d 7f       	andi	r24, 0xFD	; 253
 40c:	82 bb       	out	0x12, r24	; 18
 40e:	10 c0       	rjmp	.+32     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		}
		else if(temp > 30){
 410:	2f 31       	cpi	r18, 0x1F	; 31
 412:	31 05       	cpc	r19, r1
 414:	38 f0       	brcs	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			SETBIT(PORTD, 1); // AIR COND ON
 416:	82 b3       	in	r24, 0x12	; 18
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	82 bb       	out	0x12, r24	; 18
			CLRBIT(PORTD, 0); // HEATER OFF
 41c:	82 b3       	in	r24, 0x12	; 18
 41e:	8e 7f       	andi	r24, 0xFE	; 254
 420:	82 bb       	out	0x12, r24	; 18
 422:	06 c0       	rjmp	.+12     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		}
		else{
			CLRBIT(PORTD, 0); // HEATER OFF
 424:	82 b3       	in	r24, 0x12	; 18
 426:	8e 7f       	andi	r24, 0xFE	; 254
 428:	82 bb       	out	0x12, r24	; 18
			CLRBIT(PORTD, 1); // AIR COND OFF
 42a:	82 b3       	in	r24, 0x12	; 18
 42c:	8d 7f       	andi	r24, 0xFD	; 253
 42e:	82 bb       	out	0x12, r24	; 18
		}
		
		
		
		LCD_write_command(0x8c);
 430:	8c e8       	ldi	r24, 0x8C	; 140
 432:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
		LCD_write_string("    ");
 436:	8d e6       	ldi	r24, 0x6D	; 109
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_write_string>
		LCD_write_command(0x8c);
 43e:	8c e8       	ldi	r24, 0x8C	; 140
 440:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_write_command>
		LCD_write_number(temp);
 444:	c7 01       	movw	r24, r14
 446:	b6 01       	movw	r22, r12
 448:	88 27       	eor	r24, r24
 44a:	99 27       	eor	r25, r25
 44c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_write_number>
		LCD_write_string(" C");
 450:	82 e7       	ldi	r24, 0x72	; 114
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_write_string>
 458:	2f ef       	ldi	r18, 0xFF	; 255
 45a:	89 e6       	ldi	r24, 0x69	; 105
 45c:	98 e1       	ldi	r25, 0x18	; 24
 45e:	21 50       	subi	r18, 0x01	; 1
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	b8 cf       	rjmp	.-144    	; 0x3dc <main+0x1c>

0000046c <__udivmodsi4>:
 46c:	a1 e2       	ldi	r26, 0x21	; 33
 46e:	1a 2e       	mov	r1, r26
 470:	aa 1b       	sub	r26, r26
 472:	bb 1b       	sub	r27, r27
 474:	fd 01       	movw	r30, r26
 476:	0d c0       	rjmp	.+26     	; 0x492 <__udivmodsi4_ep>

00000478 <__udivmodsi4_loop>:
 478:	aa 1f       	adc	r26, r26
 47a:	bb 1f       	adc	r27, r27
 47c:	ee 1f       	adc	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	a2 17       	cp	r26, r18
 482:	b3 07       	cpc	r27, r19
 484:	e4 07       	cpc	r30, r20
 486:	f5 07       	cpc	r31, r21
 488:	20 f0       	brcs	.+8      	; 0x492 <__udivmodsi4_ep>
 48a:	a2 1b       	sub	r26, r18
 48c:	b3 0b       	sbc	r27, r19
 48e:	e4 0b       	sbc	r30, r20
 490:	f5 0b       	sbc	r31, r21

00000492 <__udivmodsi4_ep>:
 492:	66 1f       	adc	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	1a 94       	dec	r1
 49c:	69 f7       	brne	.-38     	; 0x478 <__udivmodsi4_loop>
 49e:	60 95       	com	r22
 4a0:	70 95       	com	r23
 4a2:	80 95       	com	r24
 4a4:	90 95       	com	r25
 4a6:	9b 01       	movw	r18, r22
 4a8:	ac 01       	movw	r20, r24
 4aa:	bd 01       	movw	r22, r26
 4ac:	cf 01       	movw	r24, r30
 4ae:	08 95       	ret

000004b0 <__divmodsi4>:
 4b0:	05 2e       	mov	r0, r21
 4b2:	97 fb       	bst	r25, 7
 4b4:	1e f4       	brtc	.+6      	; 0x4bc <__divmodsi4+0xc>
 4b6:	00 94       	com	r0
 4b8:	0e 94 6f 02 	call	0x4de	; 0x4de <__negsi2>
 4bc:	57 fd       	sbrc	r21, 7
 4be:	07 d0       	rcall	.+14     	; 0x4ce <__divmodsi4_neg2>
 4c0:	0e 94 36 02 	call	0x46c	; 0x46c <__udivmodsi4>
 4c4:	07 fc       	sbrc	r0, 7
 4c6:	03 d0       	rcall	.+6      	; 0x4ce <__divmodsi4_neg2>
 4c8:	4e f4       	brtc	.+18     	; 0x4dc <__divmodsi4_exit>
 4ca:	0c 94 6f 02 	jmp	0x4de	; 0x4de <__negsi2>

000004ce <__divmodsi4_neg2>:
 4ce:	50 95       	com	r21
 4d0:	40 95       	com	r20
 4d2:	30 95       	com	r19
 4d4:	21 95       	neg	r18
 4d6:	3f 4f       	sbci	r19, 0xFF	; 255
 4d8:	4f 4f       	sbci	r20, 0xFF	; 255
 4da:	5f 4f       	sbci	r21, 0xFF	; 255

000004dc <__divmodsi4_exit>:
 4dc:	08 95       	ret

000004de <__negsi2>:
 4de:	90 95       	com	r25
 4e0:	80 95       	com	r24
 4e2:	70 95       	com	r23
 4e4:	61 95       	neg	r22
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <__umulhisi3>:
 4ee:	a2 9f       	mul	r26, r18
 4f0:	b0 01       	movw	r22, r0
 4f2:	b3 9f       	mul	r27, r19
 4f4:	c0 01       	movw	r24, r0
 4f6:	a3 9f       	mul	r26, r19
 4f8:	70 0d       	add	r23, r0
 4fa:	81 1d       	adc	r24, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	91 1d       	adc	r25, r1
 500:	b2 9f       	mul	r27, r18
 502:	70 0d       	add	r23, r0
 504:	81 1d       	adc	r24, r1
 506:	11 24       	eor	r1, r1
 508:	91 1d       	adc	r25, r1
 50a:	08 95       	ret

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
